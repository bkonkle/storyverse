extend type Query {
  """
  Get an existing User by ID
  """
  getUser(id: UUID!): User

  """
  Get many Users, with optional filtering conditions
  """
  getManyUsers(
    where: UserCondition
    orderBy: [UsersOrderBy!]
    pageSize: Int
    page: Int
  ): UsersPage!
}

"""
A User
"""
type User {
  id: UUID!

  """
  The User's login id - usually their email address
  """
  username: String!

  """
  If false, the User is suspended
  """
  isActive: Boolean!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPage {
  data: [User!]!
  count: Int!
  total: Int!
  page: Int!
  pageCount: Int!
}

type UserCondition {
  id: UUID
  username: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

enum UsersOrderBy {
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

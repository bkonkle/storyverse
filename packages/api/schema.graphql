# WARNING: This file is automatically generated. Do not edit.
schema {
  query: Query
  mutation: Mutation
}
"""Input to create a new User Profile"""
input CreateProfileInput {
  email: String!
  displayName: String
  picture: String
  content: JSONObject
  userId: String
  user: CreateUserInput
}
"""Input to update an existing User Profile"""
input UpdateProfileInput {
  email: String
  displayName: String
  picture: String
  content: JSONObject
  userId: String
}
type MutateProfileResult {
  profile: Profile
}
type Mutation {
  """Create a new User Profile"""
  createProfile(input: CreateProfileInput!): MutateProfileResult!
  """Create a new Universe"""
  createUniverse(input: CreateUniverseInput!): MutateUniverseResult!
  """Create a new User"""
  createUser(input: CreateUserInput!): MutateUserResult!
  """Remove an existing User Profile by ID"""
  deleteProfile(id: UUID!): MutateProfileResult!
  """Remove an existing Universe by ID"""
  deleteUniverse(id: UUID!): MutateUniverseResult!
  """Update the currently authenticated User"""
  updateCurrentUser(input: UpdateUserInput!): MutateUserResult!
  """Update an existing User Profile by ID"""
  updateProfile(id: UUID!, input: UpdateProfileInput!): MutateProfileResult!
  """Update an existing Universe by ID"""
  updateUniverse(id: UUID!, input: UpdateUniverseInput!): MutateUniverseResult!
}
"""A User Profile"""
type Profile {
  id: UUID!
  """An email address"""
  email: String
  """A display name"""
  displayName: String
  """A Profile photo"""
  picture: String
  """Editor json content for the Profile body"""
  content: JSONObject
  """The id of the User that created the Profile"""
  userId: UUID
  """The User that created the Profile"""
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}
type ProfilesPage {
  data: [Profile!]!
  count: Int!
  total: Int!
  page: Int!
  pageCount: Int!
}
input ProfileCondition {
  id: UUID
  email: String
  displayName: String
  picture: String
  content: JSONObject
  userId: UUID
  createdAt: DateTime
  updatedAt: DateTime
}
enum ProfilesOrderBy {
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  USER_ID_ASC
  USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}
type Query {
  """Get the currently authenticated User"""
  getCurrentUser: User
  """Get many User Profiles, with optional filtering conditions"""
  getManyProfiles(where: ProfileCondition, orderBy: [ProfilesOrderBy!], pageSize: Int, page: Int): ProfilesPage!
  """Get many Universes, with optional filtering conditions"""
  getManyUniverses(where: UniverseCondition, orderBy: [UniversesOrderBy!], pageSize: Int, page: Int): UniversesPage!
  """Get an existing User Profile by ID"""
  getProfile(id: UUID!): Profile
  """Get an existing Universe by ID"""
  getUniverse(id: UUID!): Universe
}
"""A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."""
scalar DateTime
scalar JSON
scalar JSONObject
scalar UUID
"""Input to create a new Universe"""
input CreateUniverseInput {
  name: String!
  description: JSONObject
  ownerProfileId: UUID!
}
"""Input to update an existing Universe"""
input UpdateUniverseInput {
  name: String
  description: JSONObject
  ownerProfileId: UUID
}
type MutateUniverseResult {
  universe: Universe
}
"""A Universe"""
type Universe {
  id: UUID!
  """The Universe's name"""
  name: String!
  """Editor json content for the Universe's description"""
  description: JSONObject
  """The id of the Profile that owns the Universe"""
  ownerProfileId: UUID!
  """The Profile that owns the Universe"""
  ownerProfile: Profile!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type UniversesPage {
  data: [Universe!]!
  count: Int!
  total: Int!
  page: Int!
  pageCount: Int!
}
input UniverseCondition {
  name: String
  ownerProfileId: UUID
}
enum UniversesOrderBy {
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  USER_ID_ASC
  USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}
"""Input to create a new User"""
input CreateUserInput {
  username: String!
}
"""Input to update an existing User"""
input UpdateUserInput {
  username: String
  isActive: Boolean
}
type MutateUserResult {
  user: User
}
"""A User"""
type User {
  id: UUID!
  """The User's login id - usually their email address"""
  username: String!
  """If false, the User is suspended"""
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}
extend type Query {
  """
  Get an existing Universe by ID
  """
  getUniverse(id: ID!): Universe

  """
  Get many Universes, with optional filtering conditions
  """
  getManyUniverses(
    where: UniverseCondition
    orderBy: [UniversesOrderBy!]
    pageSize: Int
    page: Int
  ): UniversesPage!
}

"""
A Universe
"""
type Universe {
  id: ID!

  """
  The Universe's name
  """
  name: String!

  """
  Editor json content for the Universe's description
  """
  description: JSON

  """
  A cover image for the Universe
  """
  picture: String

  """
  The id of the Profile that owns the Universe
  """
  ownerProfileId: ID!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type UniversesPage {
  data: [Universe!]!
  count: Int!
  total: Int!
  page: Int!
  pageCount: Int!
}

input UniverseCondition {
  name: String
  ownerProfileId: ID
}

enum UniversesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum UniverseRoles {
  UNIVERSE_MANAGER
  UNIVERSE_ADMIN
}
